name: Windows Build

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      version:
        description: "Version to build"
        required: true
        type: string
      upload_url:
        required: false
        type: string

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'
          channel: 'stable'
        env:
          LANG: en_US.UTF-8

      - name: Install CMake
        uses: lukka/get-cmake@latest
        
      - name: Install Windows SDK
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Download Icon
        run: |
          # Create assets directory if it doesn't exist
          if (!(Test-Path "assets")) {
              New-Item -ItemType Directory -Path "assets" -Force
          }
          
          # Use main branch instead of rateme
          $iconUrl = "https://raw.githubusercontent.com/ALi3naTEd0/RateMe/main/assets/rateme.ico"
          # If ico file doesn't exist on main, try png
          $iconUrlFallback = "https://raw.githubusercontent.com/ALi3naTEd0/RateMe/main/assets/rateme.png"
          $outputPath = "assets/rateme.ico"
          
          Write-Host "Downloading icon from: $iconUrl"
          try {
              Invoke-WebRequest -Uri $iconUrl -OutFile $outputPath -ErrorAction Stop
          } catch {
              Write-Host "Icon not found at $iconUrl, trying fallback..."
              Invoke-WebRequest -Uri $iconUrlFallback -OutFile "assets/rateme.png" -ErrorAction Stop
              # Use the png file directly since we don't have ico
              Copy-Item "assets/rateme.png" -Destination $outputPath -Force
          }
          
          if (Test-Path $outputPath) {
              Write-Host "Icon downloaded successfully to: $outputPath"
              Get-ChildItem -Path "assets" -Recurse
          } else {
              Write-Error "Failed to download icon"
              exit 1
          }

      - name: Setup Windows build
        run: |
          flutter config --enable-windows-desktop
          echo "Current directory:"
          pwd
          echo "Flutter config:"
          flutter config

      - name: Build Windows
        run: flutter build windows --release --verbose

      # Create properly named portable ZIP with data directory
      - name: Create Portable ZIP
        shell: pwsh
        run: |
          # Get version
          $version = "${{ inputs.version || github.event.inputs.version }}"
          
          # Debug - List build output directory to verify contents
          Write-Host "Windows build output contents:"
          Get-ChildItem -Path "build\windows\x64\runner\Release\" -Recurse | Select-Object FullName
          
          # Create a properly named directory structure for the portable version
          $portableDirName = "RateMe_${version}_portable"
          
          # Create the portable directory and copy all build output
          New-Item -ItemType Directory -Path $portableDirName -Force
          Copy-Item -Path "build\windows\x64\runner\Release\*" -Destination $portableDirName -Recurse -Force
          
          # Make sure data directory exists (it might already be created by the build)
          if (!(Test-Path "$portableDirName\data")) {
              New-Item -ItemType Directory -Path "$portableDirName\data" -Force
              # Create empty settings file
              Set-Content -Path "$portableDirName\data\settings.json" -Value "{}"
          }
          
          # Copy assets if needed
          if (Test-Path "assets\rateme.png") {
              Copy-Item "assets\rateme.png" -Destination "$portableDirName\data\rateme.png" -Force
          }
          
          # Debug - List files in portable directory before zipping
          Write-Host "Portable directory contents:"
          Get-ChildItem -Path $portableDirName -Recurse | Select-Object FullName
          
          # Create ZIP archive with the portable app
          $zipFileName = "RateMe_${version}_portable.zip"
          Compress-Archive -Path "$portableDirName\*" -DestinationPath $zipFileName -Force
          
          # Verify ZIP was created
          if (Test-Path $zipFileName) {
              Write-Host "Created portable ZIP: $(Get-Item $zipFileName | Select-Object FullName, Length)"
          } else {
              Write-Error "Failed to create portable ZIP"
              exit 1
          }

      - name: Upload Portable ZIP
        uses: actions/upload-artifact@v4
        with:
          name: RateMe-portable
          path: RateMe_${{ inputs.version || github.event.inputs.version }}_portable.zip

      # Create and upload installer version
      - name: Install Inno Setup
        run: |
          choco install innosetup -y

      # Debug step to verify Inno Setup script
      - name: Show Inno Setup Script
        shell: pwsh
        run: |
          if (Test-Path "installers\inno_setup_script.iss") {
              Write-Host "Inno Setup Script contents:"
              Get-Content "installers\inno_setup_script.iss"
          } else {
              Write-Host "Warning: Inno Setup Script not found at expected location"
              # List installers directory contents if it exists
              if (Test-Path "installers") {
                  Get-ChildItem -Path "installers" -Recurse
              } else {
                  Write-Host "Installers directory not found"
              }
          }

      - name: Create Installer
        shell: pwsh
        env:
          VERSION: ${{ inputs.version || github.event.inputs.version }}
        run: |
          New-Item -ItemType Directory -Path "installers\Output" -Force
          & 'C:\Program Files (x86)\Inno Setup 6\ISCC.exe' installers\inno_setup_script.iss

      - name: Upload Setup Package
        uses: actions/upload-artifact@v4
        with:
          name: RateMe-Setup
          path: installers/Output/RateMe_${{ inputs.version || github.event.inputs.version }}.exe

      - name: Upload Setup Release Asset
        if: inputs.upload_url != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ inputs.upload_url }}
          asset_path: installers/Output/RateMe_${{ inputs.version || github.event.inputs.version }}.exe
          asset_name: RateMe_${{ inputs.version || github.event.inputs.version }}.exe
          asset_content_type: application/x-msdownload