name: Windows Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number'
        required: true
        type: string
        default: '1.0.0-1'
  workflow_call:
    inputs:
      version:
        required: true
        type: string
        description: 'Version number'

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.1' # Updated to latest Flutter 3.29.1 version
          channel: 'stable'
          cache: true # Add caching for better performance
        env:
          LANG: en_US.UTF-8

      # Add pub dependencies cache
      - name: Cache pub dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            .dart_tool/
          key: pub-dependencies-windows-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            pub-dependencies-windows-${{ runner.os }}-

      - name: Install CMake
        uses: lukka/get-cmake@latest
        
      - name: Install Windows SDK
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Download Icon
        run: |
          # Create assets directory if it doesn't exist
          if (!(Test-Path "assets")) {
              New-Item -ItemType Directory -Path "assets" -Force
          }
          
          # Download icon
          $iconUrl = "https://raw.githubusercontent.com/ALi3naTEd0/RateMe/main/assets/rateme.ico"
          $iconUrlFallback = "https://raw.githubusercontent.com/ALi3naTEd0/RateMe/main/assets/rateme.png"
          $outputPath = "assets/rateme.ico"
          
          try {
              Invoke-WebRequest -Uri $iconUrl -OutFile $outputPath -ErrorAction Stop
          } catch {
              Invoke-WebRequest -Uri $iconUrlFallback -OutFile "assets/rateme.png" -ErrorAction Stop
              Copy-Item "assets/rateme.png" -Destination $outputPath -Force
          }
          
          if (Test-Path $outputPath) {
              Write-Host "Icon downloaded successfully to: $outputPath"
          }

      # Install dependencies first to improve build performance  
      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Setup Windows build
        run: flutter config --enable-windows-desktop

      # Create the necessary native_assets directory for Windows
      - name: Prepare build directories
        shell: pwsh
        run: |
          # Create the missing native_assets directory to prevent build failures
          New-Item -ItemType Directory -Path "build\native_assets\windows" -Force
          Write-Host "Created native_assets directory for Windows"

      - name: Build Windows
        shell: pwsh
        run: |
          # First try the standard build
          try {
            flutter build windows --release --no-pub
          } catch {
            Write-Host "First build attempt failed, trying with fallback options..."
            
            # Ensure the directory exists again just to be safe
            New-Item -ItemType Directory -Path "build\native_assets\windows" -Force
            
            # Try again with additional parameters
            flutter build windows --release --no-pub --dart-define=flutter.inspector.structuredErrors=true
          }

      - name: Create Portable ZIP
        shell: pwsh
        run: |
          $version = "${{ inputs.version || github.event.inputs.version }}"
          
          $portableDirName = "RateMe_${version}_portable"
          
          New-Item -ItemType Directory -Path $portableDirName -Force
          Copy-Item -Path "build\windows\x64\runner\Release\*" -Destination $portableDirName -Recurse -Force
          
          if (!(Test-Path "$portableDirName\data")) {
              New-Item -ItemType Directory -Path "$portableDirName\data" -Force
              Set-Content -Path "$portableDirName\data\settings.json" -Value "{}"
          }
          
          $zipFileName = "RateMe_${version}_portable.zip"
          Compress-Archive -Path "$portableDirName\*" -DestinationPath $zipFileName -Force

      - name: Upload Portable ZIP
        uses: actions/upload-artifact@v4
        with:
          name: RateMe-portable
          path: RateMe_${{ inputs.version || github.event.inputs.version }}_portable.zip

      - name: Install Inno Setup
        run: choco install innosetup -y

      - name: Create Installer
        shell: pwsh
        env:
          VERSION: ${{ inputs.version || github.event.inputs.version }}
        run: |
          New-Item -ItemType Directory -Path "installers\Output" -Force
          & 'C:\Program Files (x86)\Inno Setup 6\ISCC.exe' installers\inno_setup_script.iss

      - name: Upload Setup Package
        uses: actions/upload-artifact@v4
        with:
          name: RateMe-Setup
          path: installers/Output/RateMe_${{ inputs.version || github.event.inputs.version }}.exe