name: NixOS Package Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number'
        required: true
        type: string
        default: '1.0.3-1'
  release:
    types: [published]

jobs:
  build-nix-package:
    runs-on: ubuntu-latest
    name: Build NixOS Package
    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build libgtk-3-dev
      
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.3'
          channel: 'stable'
          cache: true

      - name: Build Flutter App
        run: |
          flutter config --enable-linux-desktop
          flutter pub get
          flutter build linux --release

      - name: Create NixOS Package
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "Using version: $VERSION"
          
          # Create package structure
          mkdir -p nixos/bundle
          cp -r build/linux/x64/release/bundle/* nixos/bundle/
          
          cat > nixos/default.nix << EOF
          { lib, stdenv, makeDesktopItem, copyDesktopItems, gtk3, makeWrapper }:

          stdenv.mkDerivation rec {
            pname = "rateme";
            version = "$VERSION";
            
            src = ./bundle;  # Use the bundle directory directly
            
            nativeBuildInputs = [ makeWrapper copyDesktopItems ];
            buildInputs = [ gtk3 ];
            
            desktopItems = [
              (makeDesktopItem {
                name = "rateme";
                exec = "rateme";
                icon = "rateme";
                comment = "Rate and organize your music collection";
                desktopName = "Rate Me!";
                categories = [ "Audio" "Music" ];
              })
            ];
            
            dontStrip = true;  # Keep debug symbols for Flutter
            
            installPhase = ''
              runHook preInstall
              
              mkdir -p \$out/lib/rateme \$out/bin \$out/share/icons/hicolor/512x512/apps
              
              # Copy all files to lib directory
              cp -a . \$out/lib/rateme
              
              # Create wrapper
              makeWrapper \$out/lib/rateme/rateme \\
                --set LD_LIBRARY_PATH "\$out/lib/rateme/lib"
              
              # Copy icon
              cp data/flutter_assets/assets/rateme.png \\
                \$out/share/icons/hicolor/512x512/apps/
              
              runHook postInstall
            '';
            
            meta = with lib; {
              description = "A multi-platform app to rate and organize your music collection";
              homepage = "https://github.com/ALi3naTEd0/RateMe";
              license = licenses.gpl3;
              platforms = [ "x86_64-linux" ];
              maintainers = [ maintainers.ali3nated0 ];
            };
          }
          EOF
          
          # Create shell.nix
          cat > nixos/shell.nix << EOF
          { pkgs ? import <nixpkgs> {} }:
          pkgs.callPackage ./default.nix {}
          EOF
          
          # Create installation guide
          cat > nixos/README.md << 'EOF'
          # Rate Me! for NixOS

          ## Quick Installation

          ```bash
          # Install globally
          sudo nix-env -i -f default.nix

          # Or install for current user only
          nix-env -i -f default.nix
          ```

          ## Testing Before Installation

          ```bash
          # Build without installing
          nix-build
          
          # Run the built package
          ./result/bin/rateme
          ```

          ## Development

          For development, use the provided shell.nix:
          ```bash
          nix-shell
          ```

          ## Uninstallation

          ```bash
          nix-env -e rateme
          ```
          EOF
          
          # Create tarball with all components
          cd nixos
          tar -czf ../rateme-nixos-$VERSION.tar.gz bundle default.nix shell.nix README.md
          cd ..
          
          echo "Created package archive with:"
          tar -tvf rateme-nixos-$VERSION.tar.gz

      - name: Upload NixOS Package
        uses: actions/upload-artifact@v4
        with:
          name: rateme-nixos-package
          path: rateme-nixos-*.tar.gz

      - name: Add to Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: rateme-nixos-*.tar.gz
