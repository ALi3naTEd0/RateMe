name: Release Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to build"
        required: true
        default: "1.0.0-1"
      platforms:
        description: "Platforms to build"
        required: true
        type: choice
        options:
          - all
          - android
          - linux
          - windows
          - macos
  push:
    tags:
      - 'v*'  # matches any version tag starting with 'v'

permissions:
  contents: write

jobs:
  # Build jobs (unchanged)
  android-build:
    if: ${{ github.event_name != 'push' && (inputs.platforms == 'all' || inputs.platforms == 'android') }}
    uses: ALi3naTEd0/RateMe/.github/workflows/android.yml@rateme
    secrets: inherit
    with:
      version: ${{ inputs.version }}

  linux-build:
    if: ${{ github.event_name != 'push' && (inputs.platforms == 'all' || inputs.platforms == 'linux') }}
    uses: ALi3naTEd0/RateMe/.github/workflows/linux.yml@rateme
    secrets: inherit
    with:
      version: ${{ inputs.version }}

  windows-build:
    if: ${{ github.event_name != 'push' && (inputs.platforms == 'all' || inputs.platforms == 'windows') }}
    uses: ALi3naTEd0/RateMe/.github/workflows/windows.yml@rateme
    secrets: inherit
    with:
      version: ${{ inputs.version }}

  macos-build:
    if: ${{ github.event_name != 'push' && (inputs.platforms == 'all' || inputs.platforms == 'macos') }}
    uses: ALi3naTEd0/RateMe/.github/workflows/macos.yml@rateme
    secrets: inherit
    with:
      version: ${{ inputs.version }}

  # Build release with artifacts
  create-release:
    name: Create Release from Builds
    if: |
      github.event_name != 'push' && 
      !cancelled() && !failure() &&
      (needs.android-build.result == 'success' || needs.android-build.result == 'skipped') &&
      (needs.linux-build.result == 'success' || needs.linux-build.result == 'skipped') &&
      (needs.windows-build.result == 'success' || needs.windows-build.result == 'skipped') &&
      (needs.macos-build.result == 'success' || needs.macos-build.result == 'skipped')
    needs: [android-build, linux-build, windows-build, macos-build]
    runs-on: ubuntu-latest
    steps:
      - name: Create dist directory
        run: mkdir -p dist

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: '**/*'
          merge-multiple: true
          
      - name: Organize artifacts
        run: |
          # Move all nested files to root
          find dist -mindepth 2 -type f -exec mv -t dist/ {} +
          # Remove empty directories
          find dist -type d -empty -delete
          # Display results
          echo "Final artifacts:"
          cd dist && ls -lh *

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ inputs.version }}
          name: Release v${{ inputs.version }}
          draft: false
          files: dist/**/*

  # Combined job for tag-based release and doc update
  process-tag:
    name: Process Tag Release
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: rateme

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      # Step 1: Create the release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          commitish: ${{ github.sha }}
      
      # Step 2: Update documentation immediately
      - name: Update Documentation
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          RELEASE_URL="https://github.com/ALi3naTEd0/RateMe/releases/tag/v${VERSION}"
          RELEASE_DATE=$(date +"%Y-%m-%d")
          
          echo "Updating README.md and CHANGELOG.md for version $VERSION"
          
          # Find existing version in files to replace
          OLD_VERSION=$(grep -o "RateMe_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\.exe" README.md 2>/dev/null | head -1 | cut -d'_' -f2 | cut -d'.' -f1,2,3,4 || echo "")
          
          # Print debug info about versions
          echo "Found old version: '$OLD_VERSION'"
          echo "New version: '$VERSION'"
          
          # If old version found, update it
          if [ -n "$OLD_VERSION" ]; then
            echo "Replacing version $OLD_VERSION with $VERSION in README.md"
            sed -i "s|RateMe_${OLD_VERSION}|RateMe_${VERSION}|g" README.md
          fi
          
          # Update download paths in README.md
          sed -i "s|/download/v[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+/|/download/v${VERSION}/|g" README.md
          
          # Update version badge in README.md
          sed -i "s|/v/release/.*?include|/v/release/ALi3naTEd0/RateMe?include|g" README.md
          
          # Update CHANGELOG.md
          sed -i "/## \[Unreleased\]/,/## \[/c\## [Unreleased]\n\n## [$VERSION] - $RELEASE_DATE" CHANGELOG.md
          
          # Debug: show changes
          echo "README.md changes:"
          git diff README.md
          
          echo "CHANGELOG.md changes:"
          git diff CHANGELOG.md
          
          # Commit changes
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add README.md CHANGELOG.md
          git commit -m "docs: update version to ${VERSION}" || echo "No changes to commit in docs"
          git push || echo "Nothing to push for docs"

      - name: Update Website
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          cd docs
          
          # Update paths and filenames in website files
          echo "Updating docs/index.html for version $VERSION"
          
          # Update download paths
          sed -i "s|/download/v[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+/|/download/v${VERSION}/|g" index.html ../README.md
          sed -i "s|/releases/download/v[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+/|/releases/download/v${VERSION}/|g" index.html ../README.md
          
          # Update specific filenames
          sed -i "s|RateMe_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\.exe|RateMe_${VERSION}.exe|g" index.html ../README.md
          sed -i "s|RateMe_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\.dmg|RateMe_${VERSION}.dmg|g" index.html ../README.md
          sed -i "s|RateMe_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\.AppImage|RateMe_${VERSION}.AppImage|g" index.html ../README.md
          sed -i "s|RateMe_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+_amd64\.deb|RateMe_${VERSION}_amd64.deb|g" index.html ../README.md
          sed -i "s|RateMe_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+_x86_64\.rpm|RateMe_${VERSION}_x86_64.rpm|g" index.html ../README.md
          
          # Update APK files
          sed -i "s|RateMe_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\.apk|RateMe_${VERSION}.apk|g" index.html ../README.md
          sed -i "s|RateMe_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+_arm64-v8a\.apk|RateMe_${VERSION}_arm64-v8a.apk|g" index.html ../README.md
          sed -i "s|RateMe_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+_armeabi-v7a\.apk|RateMe_${VERSION}_armeabi-v7a.apk|g" index.html ../README.md
          sed -i "s|RateMe_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+_x86_64\.apk|RateMe_${VERSION}_x86_64.apk|g" index.html ../README.md
          
          # Update displayed versions
          sed -i "s|Version [0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+|Version ${VERSION}|g" index.html
          sed -i "s|\"version\": \"[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\"|\"version\": \"${VERSION}\"|g" index.html
          
          # Debug: show changes
          echo "index.html changes:"
          git diff index.html
          
          git add index.html
          git commit -m "docs: update website version to ${VERSION}" || echo "No changes to commit in website"
          git push || echo "Nothing to push for website"
