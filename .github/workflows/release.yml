name: Release Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to build"
        required: true
        default: "1.0.0-1"
      platforms:
        description: "Platforms to build"
        required: true
        type: choice
        options:
          - all
          - android
          - linux
          - windows
          - macos
  push:
    tags:
      - 'v*'  # matches any version tag starting with 'v'

permissions:
  contents: write

jobs:
  # STEP 1: BUILD PHASE - Build all required platforms
  android-build:
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.platforms == 'all' || inputs.platforms == 'android')) ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    uses: ALi3naTEd0/RateMe/.github/workflows/android.yml@rateme
    secrets: inherit
    with:
      version: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}

  linux-build:
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.platforms == 'all' || inputs.platforms == 'linux')) ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    uses: ALi3naTEd0/RateMe/.github/workflows/linux.yml@rateme
    secrets: inherit
    with:
      version: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}

  windows-build:
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.platforms == 'all' || inputs.platforms == 'windows')) ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    uses: ALi3naTEd0/RateMe/.github/workflows/windows.yml@rateme
    secrets: inherit
    with:
      version: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}

  macos-build:
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.platforms == 'all' || inputs.platforms == 'macos')) ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    uses: ALi3naTEd0/RateMe/.github/workflows/macos.yml@rateme
    secrets: inherit
    with:
      version: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}

  # STEP 2: CREATE RELEASE - Create the GitHub release and attach artifacts
  create-release:
    name: Create Release
    needs: [android-build, linux-build, windows-build, macos-build]
    if: |
      !cancelled() && !failure() &&
      (needs.android-build.result == 'success' || needs.android-build.result == 'skipped') &&
      (needs.linux-build.result == 'success' || needs.linux-build.result == 'skipped') &&
      (needs.windows-build.result == 'success' || needs.windows-build.result == 'skipped') &&
      (needs.macos-build.result == 'success' || needs.macos-build.result == 'skipped')
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
      release_url: ${{ steps.create_release.outputs.html_url }}
    steps:
      - name: Get Version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi
          echo "Using version: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.ref_name }}"

      - name: Create Dist Directory
        run: mkdir -p dist

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: '**/*'
          merge-multiple: true

      - name: Organize Artifacts
        run: |
          echo "Initial dist content:"
          ls -la dist/
          
          # Move nested files to root
          find dist -mindepth 2 -type f -exec mv -t dist/ {} +
          
          # Remove empty directories
          find dist -type d -empty -delete
          
          echo "Final dist content:"
          ls -lh dist/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', github.event.inputs.version) || github.ref }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', github.event.inputs.version) || github.ref }}
          name: Release v${{ steps.get_version.outputs.VERSION }}
          files: dist/**/*
          draft: false
          
      - name: Debug Release Info
        run: |
          echo "Release created successfully:"
          echo "Version: ${{ steps.get_version.outputs.VERSION }}"
          echo "URL: ${{ steps.create_release.outputs.html_url }}"
          echo "Upload URL: ${{ steps.create_release.outputs.upload_url }}"

  # STEP 3: UPDATE DOCUMENTATION - Update docs with new version links
  update-docs:
    name: Update Documentation
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog
          ref: rateme     # Main branch
          
      - name: Update Documentation
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          RELEASE_URL="${{ needs.create-release.outputs.release_url }}"
          RELEASE_DATE=$(date +"%Y-%m-%d")
          
          echo "Updating documentation for version $VERSION"
          echo "Release URL: $RELEASE_URL"
          echo "Release Date: $RELEASE_DATE"
          
          # Update README links and version numbers
          sed -i "s|/download/v[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+/|/download/v${VERSION}/|g" README.md
          sed -i "s|RateMe_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+|RateMe_${VERSION}|g" README.md
          
          # Update CHANGELOG
          sed -i "/## \[Unreleased\]/,/## \[/c\## [Unreleased]\n\n## [$VERSION] - $RELEASE_DATE" CHANGELOG.md
          
          # Show changes for debugging
          echo "Changes in README:"
          git diff README.md
          
          echo "Changes in CHANGELOG:"
          git diff CHANGELOG.md
          
          # Commit changes
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add README.md CHANGELOG.md
          git commit -m "docs: update to version ${VERSION}" || echo "No changes to commit"
          git push || echo "No changes to push"
          
      - name: Update Website
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          
          if [ -d "docs" ]; then
            cd docs
            
            # Update version numbers
            sed -i "s|/download/v[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+/|/download/v${VERSION}/|g" index.html
            sed -i "s|RateMe_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+|RateMe_${VERSION}|g" index.html
            sed -i "s|Version [0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+|Version ${VERSION}|g" index.html
            
            # Commit changes
            git add index.html
            git commit -m "docs: update website to version ${VERSION}" || echo "No changes to website"
            git push || echo "No website changes to push"
          else
            echo "Docs directory not found, skipping website update"
          fi
